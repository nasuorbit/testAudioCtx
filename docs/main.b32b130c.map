{"version":3,"sources":["constant.ts","player/player.ts","player/sample.ts","main.ts"],"names":[],"mappings":";AAIa,aAAA,QAAA,YAAA,EAJA,QAAA,QAAU,SAAS,eAAe,QAClC,QAAA,QAAU,SAAS,eAAe,QAClC,QAAA,UAA8B,SAAS,eAAe,QACtD,QAAA,UAA8B,SAAS,eAAe,kBACtD,QAAA,YAAc,SAAS,eAAe;;ACHtC,aAAA,QAAA,YAAA,EAAb,IAAA,EAAA,WAIE,SAAA,IACO,KAAA,SAAW,IAAI,aACf,KAAA,UAAY,KAAK,SAAS,sBAAsB,KAAM,EAAG,GACzD,KAAA,eAAiB,KAAK,SAAS,aAC/B,KAAA,eAAe,KAAK,MAAQ,GAC5B,KAAA,eAAe,QAAQ,KAAK,SAAS,aAwB9C,OArBE,EAAA,UAAA,KAAA,SAAK,GACE,KAAA,UAAU,eAAiB,GAIlC,EAAA,UAAA,KAAA,WACO,KAAA,UAAU,QAAQ,KAAK,iBAG9B,EAAA,UAAA,KAAA,WACO,KAAA,UAAU,cAGjB,EAAA,UAAA,cAAA,WACS,OAAA,KAAK,eAAe,KAAK,OAGlC,EAAA,UAAA,cAAA,SAAc,GACZ,QAAQ,IAAI,GACP,KAAA,eAAe,KAAK,MAAQ,GAErC,EAjCA,GAAa,QAAA,SAAA;;ACSb,aAAA,QAAA,YAAA,EAVa,QAAA,SAAW,SAAC,QAAA,IAAA,IAAA,EAAA,IACnB,IAAA,EAAI,EACD,OAAA,SAAC,GAED,IADC,IAAA,EAAO,EAAE,aAAa,eAAe,GAClC,EAAI,EAAG,EAAI,EAAK,SAAU,EACjC,GAAG,EACH,EAAK,GAAK,KAAK,IAAI;;ACazB,aAAA,QAAA,YAAA,EAnBA,IAAA,EAAA,QAAA,cACA,EAAA,QAAA,mBACA,EAAA,QAAA,mBAEM,EAAS,IAAI,EAAA,SAInB,EAAA,QAAQ,QAAU,WAAO,EAAO,QAChC,EAAA,QAAQ,QAAU,WAAO,EAAO,QAChC,EAAA,UAAU,MAAQ,EAAO,gBAAgB,WACzC,EAAA,UAAU,SAAW,SAAC,GACpB,EAAO,cAAc,WAAW,EAAA,UAAU,SAE5C,EAAA,UAAU,MAAQ,MAClB,EAAA,YAAY,QAAU,WACpB,EAAO,KAAK,EAAA,SAAS,WAAW,EAAA,UAAU,UAG5C,EAAO,KAAK,EAAA,SAAS,WAAW,EAAA,UAAU","file":"main.b32b130c.map","sourceRoot":"..\\src","sourcesContent":["export const playBtn = document.getElementById(\"play\")!;\r\nexport const stopBtn = document.getElementById(\"stop\")!;\r\nexport const gainRange = <HTMLInputElement>document.getElementById(\"gain\")!;\r\nexport const sineSpeed = <HTMLInputElement>document.getElementById(\"sinewave-speed\")!;\r\nexport const sineLoadBtn = document.getElementById(\"load-sinewave\")!;","import { sineWave } from './sample'\r\nexport class ngPlayer {\r\n  audioCtx: AudioContext\r\n  mixerNode: ScriptProcessorNode\r\n  masterGainNode: GainNode\r\n  constructor() {\r\n    this.audioCtx = new AudioContext();\r\n    this.mixerNode = this.audioCtx.createScriptProcessor(1024, 1, 1);\r\n    this.masterGainNode = this.audioCtx.createGain();\r\n    this.masterGainNode.gain.value = 0.5;\r\n    this.masterGainNode.connect(this.audioCtx.destination);\r\n  }\r\n\r\n  load(fn: (this: ScriptProcessorNode, ev: AudioProcessingEvent) => any) {\r\n    this.mixerNode.onaudioprocess = fn;\r\n    //sineWave(0.1)\r\n  }\r\n\r\n  play() {\r\n    this.mixerNode.connect(this.masterGainNode);\r\n  }\r\n\r\n  stop() {\r\n    this.mixerNode.disconnect();\r\n  }\r\n\r\n  getMasterGain() {\r\n    return this.masterGainNode.gain.value;\r\n  }\r\n\r\n  setMasterGain(value: number) {\r\n    console.log(value);\r\n    this.masterGainNode.gain.value = value;\r\n  }\r\n}\r\n","export const sineWave = (speed=0.2) => {\r\n  let x = 0\r\n  return (e: AudioProcessingEvent) => {\r\n    const data = e.outputBuffer.getChannelData(0);\r\n    for (let i = 0; i < data.length; ++i) {\r\n      x+=speed;\r\n      data[i] = Math.sin(x);\r\n    }\r\n  }\r\n}\r\n/*\r\n\r\nexport const sineWave = {\r\n  x: 0,\r\n  play: (e: AudioProcessingEvent) => {\r\n    var data = e.outputBuffer.getChannelData(0);\r\n    for (var i = 0; i < data.length; ++i) {\r\n      data[i] = Math.sin(this.x++);\r\n    }\r\n  }\r\n}\r\n*/","import { playBtn, stopBtn, gainRange, sineLoadBtn, sineSpeed } from './constant'\r\nimport { ngPlayer } from './player/player'\r\nimport { sineWave } from './player/sample'\r\n\r\nconst player = new ngPlayer\r\n\r\n//player.load()\r\n\r\nplayBtn.onclick = () => {player.play()}\r\nstopBtn.onclick = () => {player.stop()}\r\ngainRange.value = player.getMasterGain().toString()\r\ngainRange.onchange = (e) => {\r\n  player.setMasterGain(parseFloat(gainRange.value))\r\n}\r\nsineSpeed.value = \"0.2\"\r\nsineLoadBtn.onclick = () => {\r\n  player.load(sineWave(parseFloat(sineSpeed.value)))\r\n}\r\n\r\nplayer.load(sineWave(parseFloat(sineSpeed.value)))"]}