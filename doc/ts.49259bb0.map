{"version":3,"sources":["ts/constant.ts","ts/player/sample.ts","ts/player/player.ts","ts/index.ts"],"names":[],"mappings":";AAEa,aAAA,QAAA,YAAA,EAFA,QAAA,QAAU,SAAS,eAAe,QAClC,QAAA,QAAU,SAAS,eAAe,QAClC,QAAA,UAA8B,SAAS,eAAe;;ACQnE,aAAA,QAAA,YAAA,EAVa,QAAA,SAAW,SAAC,GACnB,IAAA,EAAI,EACD,OAAA,SAAC,GAED,IADC,IAAA,EAAO,EAAE,aAAa,eAAe,GAClC,EAAI,EAAG,EAAI,EAAK,SAAU,EACjC,GAAG,GACH,EAAK,GAAK,KAAK,IAAI;;ACLZ,aAAA,QAAA,YAAA,EADb,IAAA,EAAA,QAAA,YACA,EAAA,WAIE,SAAA,IACO,KAAA,SAAW,IAAI,aACf,KAAA,UAAY,KAAK,SAAS,sBAAsB,KAAM,EAAG,GACzD,KAAA,eAAiB,KAAK,SAAS,aAC/B,KAAA,eAAe,KAAK,MAAQ,GAC5B,KAAA,eAAe,QAAQ,KAAK,SAAS,aAuB9C,OApBE,EAAA,UAAA,KAAA,WACO,KAAA,UAAU,eAAiB,EAAA,SAAS,IAG3C,EAAA,UAAA,KAAA,WACO,KAAA,UAAU,QAAQ,KAAK,iBAG9B,EAAA,UAAA,KAAA,WACO,KAAA,UAAU,cAGjB,EAAA,UAAA,cAAA,WACS,OAAA,KAAK,eAAe,KAAK,OAGlC,EAAA,UAAA,cAAA,SAAc,GACZ,QAAQ,IAAI,GACP,KAAA,eAAe,KAAK,MAAQ,GAErC,EAhCA,GAAa,QAAA,SAAA;;ACSb,aAAA,QAAA,YAAA,EAVA,IAAA,EAAA,QAAA,cACA,EAAA,QAAA,mBAEM,EAAS,IAAI,EAAA,SAEnB,EAAO,OAEP,EAAA,QAAQ,QAAU,WAAO,EAAO,QAChC,EAAA,QAAQ,QAAU,WAAO,EAAO,QAChC,EAAA,UAAU,MAAQ,EAAO,gBAAgB,WACzC,EAAA,UAAU,SAAW,SAAC,GACpB,EAAO,cAAc,WAAW,EAAA,UAAU","file":"ts.49259bb0.map","sourceRoot":"..\\src","sourcesContent":["export const playBtn = document.getElementById(\"play\")!;\r\nexport const stopBtn = document.getElementById(\"stop\")!;\r\nexport const gainRange = <HTMLInputElement>document.getElementById(\"gain\")!;","export const sineWave = (defx: number) => {\r\n  let x = defx;\r\n  return (e: AudioProcessingEvent) => {\r\n    const data = e.outputBuffer.getChannelData(0);\r\n    for (let i = 0; i < data.length; ++i) {\r\n      x+=0.2;\r\n      data[i] = Math.sin(x);\r\n    }\r\n  }\r\n}\r\n/*\r\n\r\nexport const sineWave = {\r\n  x: 0,\r\n  play: (e: AudioProcessingEvent) => {\r\n    var data = e.outputBuffer.getChannelData(0);\r\n    for (var i = 0; i < data.length; ++i) {\r\n      data[i] = Math.sin(this.x++);\r\n    }\r\n  }\r\n}\r\n*/","import { sineWave } from './sample'\r\nexport class ngPlayer {\r\n  audioCtx: AudioContext\r\n  mixerNode: ScriptProcessorNode\r\n  masterGainNode: GainNode\r\n  constructor() {\r\n    this.audioCtx = new AudioContext();\r\n    this.mixerNode = this.audioCtx.createScriptProcessor(1024, 1, 1);\r\n    this.masterGainNode = this.audioCtx.createGain();\r\n    this.masterGainNode.gain.value = 0.5;\r\n    this.masterGainNode.connect(this.audioCtx.destination);\r\n  }\r\n\r\n  load() {\r\n    this.mixerNode.onaudioprocess = sineWave(0)\r\n  }\r\n\r\n  play() {\r\n    this.mixerNode.connect(this.masterGainNode);\r\n  }\r\n\r\n  stop() {\r\n    this.mixerNode.disconnect();\r\n  }\r\n\r\n  getMasterGain() {\r\n    return this.masterGainNode.gain.value;\r\n  }\r\n\r\n  setMasterGain(value: number) {\r\n    console.log(value);\r\n    this.masterGainNode.gain.value = value;\r\n  }\r\n}\r\n","import { playBtn, stopBtn, gainRange } from './constant'\r\nimport { ngPlayer } from './player/player'\r\n\r\nconst player = new ngPlayer\r\n\r\nplayer.load()\r\n\r\nplayBtn.onclick = () => {player.play()}\r\nstopBtn.onclick = () => {player.stop()}\r\ngainRange.value = player.getMasterGain().toString()\r\ngainRange.onchange = (e) => {\r\n  player.setMasterGain(parseFloat(gainRange.value))\r\n}\r\n"]}